[
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Download PDF Resume \n\n\n\n\nYour browser can’t display PDFs here. Open the resume in a new tab."
  },
  {
    "objectID": "projects/manga-sentiment.html",
    "href": "projects/manga-sentiment.html",
    "title": "Manga Sentiment Analysis",
    "section": "",
    "text": "1 Overview\nScraped manga reviews and analyzed sentiment. This work was inspired and refered to One Piece Analysis by Viet Anh.\n\nTools: Python (Selenium, TextBlob, NLTK)\nVisualized sentiment trends in Power BI and Tableau\n\n\n\n2 Methods (brief)\n\nCollection: Automated review scraping with Selenium.\nCleaning: Lowercasing, punctuation removal, stopword filtering (NLTK).\nSentiment: Polarity scoring with TextBlob; aggregate by date/title to see trends.\nVisualization: Power BI and Tableau dashboards for time trends and distributions\n\n\n\n3 Interactive Dashboard (Tableau)\n\n\n\nIf the embed doesn’t load, open it directly:  Tableau Public link ."
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Hi, I’m Hien (Emi) Bui",
    "section": "",
    "text": "I’m a Data Science master’s student (Drew University, expected 2026) with a background in Economics (B.A.) and minors in Mathematics & Asian Studies.\nBefore transitioning into data, I spent 6+ years managing projects in VFX/animation and client services—leading cross-functional teams, delivering for global clients, and honing communication and leadership skills.\nToday, I combine that creative and organizational background with data science, machine learning, and analytics to solve real-world problems. My work spans ML model development, coding experiments, and interactive dashboards.\n\n\n\n\nProgramming & Tools: Python · R · SQL · Jupyter Notebook · VSCode\n\nVisualization & BI: Tableau · Power BI · Plotly · Data Wrangling\n\n3D & Creative: Maya · Blender · Substance Painter\n\nOther: Google Suite · Microsoft Office\n\n\n\n\nProject Management · Data Analysis · Data Visualization · Communication\nProblem Solving · Teamwork · Critical Thinking · Research\n\n👉 Check out my Projects, view my Resume, or connect via LinkedIn / GitHub."
  },
  {
    "objectID": "projects/index.html#technical-skills",
    "href": "projects/index.html#technical-skills",
    "title": "Hi, I’m Hien (Emi) Bui",
    "section": "",
    "text": "Programming & Tools: Python · R · SQL · Jupyter Notebook · VSCode\n\nVisualization & BI: Tableau · Power BI · Plotly · Data Wrangling\n\n3D & Creative: Maya · Blender · Substance Painter\n\nOther: Google Suite · Microsoft Office"
  },
  {
    "objectID": "projects/index.html#professional-strengths",
    "href": "projects/index.html#professional-strengths",
    "title": "Hi, I’m Hien (Emi) Bui",
    "section": "",
    "text": "Project Management · Data Analysis · Data Visualization · Communication\nProblem Solving · Teamwork · Critical Thinking · Research\n\n👉 Check out my Projects, view my Resume, or connect via LinkedIn / GitHub."
  },
  {
    "objectID": "projects/book-ratings.html",
    "href": "projects/book-ratings.html",
    "title": "Book Genre Ratings Analysis",
    "section": "",
    "text": "This project analyzes book genres and their ratings using Pandas, Plotly, and GreatTables. It presents structured tables and different bar charts to explore how ratings vary across genres and between male and female readers.\n\n\n\nFormatted Data Tables for book genres and their ratings.\n\nStacked/Paired/Facet Charts to compare ratings between male and female readers.\n\nCustom Styling for clear and professional presentation.\n\nData Processing with Pandas to analyze genre-based ratings."
  },
  {
    "objectID": "projects/book-ratings.html#key-features",
    "href": "projects/book-ratings.html#key-features",
    "title": "Book Genre Ratings Analysis",
    "section": "",
    "text": "Formatted Data Tables for book genres and their ratings.\n\nStacked/Paired/Facet Charts to compare ratings between male and female readers.\n\nCustom Styling for clear and professional presentation.\n\nData Processing with Pandas to analyze genre-based ratings."
  },
  {
    "objectID": "projects/book-ratings.html#formatted-data-table-and-horizontal-bar-chart-genre-ratings",
    "href": "projects/book-ratings.html#formatted-data-table-and-horizontal-bar-chart-genre-ratings",
    "title": "Book Genre Ratings Analysis",
    "section": "2.1 Formatted Data Table and Horizontal Bar Chart: Genre Ratings",
    "text": "2.1 Formatted Data Table and Horizontal Bar Chart: Genre Ratings\n\n2.1.1 Formatted Data Table\nA well-structured table displaying the average ratings for each book genre. The table is color-coded to highlight the highest and lowest rated genres.\n- This table provides numerical data for average reviews and ratings across different genres.\n- Sci-Fi has the highest average rating (2,023,518), followed by Thrillers (1,798,566) and Fantasy (1,561,214).\n- Action and Autobiographies have the lowest ratings in the dataset.\n\n\n\n2.1.2 Horizontal Bar Chart\n\nThis chart ranks genres based on their total ratings.\n\nSci-Fi leads the ratings board, followed by Thrillers and Fantasy.\n\nAction and Autobiographies receive the lowest ratings among the listed genres."
  },
  {
    "objectID": "projects/book-ratings.html#stackedpairedfacet-charts-male-vs.-female-ratings",
    "href": "projects/book-ratings.html#stackedpairedfacet-charts-male-vs.-female-ratings",
    "title": "Book Genre Ratings Analysis",
    "section": "2.2 Stacked/Paired/Facet Charts: Male vs. Female Ratings",
    "text": "2.2 Stacked/Paired/Facet Charts: Male vs. Female Ratings\nThey compare book ratings between male and female readers for different genres.\n\n2.2.1 Stacked Chart\n\nThis chart stacks male and female author ratings on top of each other.\n\nIt highlights the contribution of each gender to overall ratings in different genres.\n\nSci-Fi and Thrillers maintain the highest overall ratings, showing strong performance across genders.\n\n\n\n\n2.2.2 Paired Chart\n\nThis bar chart presents book ratings split by gender, with bars for male and female authors side by side for comparison.\n\nSci-Fi, Thrillers, and Fantasy stand out as the most highly rated genres, with Sci-Fi leading for female authors and Fantasy leading for male authors."
  },
  {
    "objectID": "projects/book-ratings.html#facet-chart-male-vs.-female-ratings",
    "href": "projects/book-ratings.html#facet-chart-male-vs.-female-ratings",
    "title": "Book Genre Ratings Analysis",
    "section": "2.3 Facet Chart: Male vs. Female Ratings",
    "text": "2.3 Facet Chart: Male vs. Female Ratings\n\nThis chart separates book ratings by author gender, displaying ratings for various genres.\n\nSci-Fi has the highest ratings among female authors, while Fantasy dominates for male authors.\n\nThrillers and Romance are also strong performers across both genders."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "I’m open to internships and collaborations.\n\nEmail\n\nLinkedIn\n\nGitHub"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi, I’m Hien (Emi) Bui",
    "section": "",
    "text": "I’m a Data Science master’s student (Drew University, expected 2026) with a background in Economics (B.A.) and minors in Mathematics & Asian Studies.\nBefore transitioning into data, I spent 6+ years managing projects in VFX/animation and client services—leading cross-functional teams, delivering for global clients, and honing communication and leadership skills.\nToday, I combine that creative and organizational background with data science, machine learning, and analytics to solve real-world problems. My work spans ML model development, coding experiments, and interactive dashboards.\n\n\n\nProgramming & Tools: Python · R · SQL · Jupyter Notebook · VSCode\n\nVisualization & BI: Tableau · Power BI · Plotly · Data Wrangling\n\n3D & Creative: Maya · Blender · Substance Painter\n\nOther: Google Suite · Microsoft Office\n\n\n\n\n\nProject Management · Data Analysis · Data Visualization · Communication\n\nProblem Solving · Teamwork · Critical Thinking · Research\n\nCheck out my Projects, view my Resume, or connect via\nLinkedIn · GitHub"
  },
  {
    "objectID": "index.html#technical-skills",
    "href": "index.html#technical-skills",
    "title": "Hi, I’m Hien (Emi) Bui",
    "section": "",
    "text": "Programming & Tools: Python · R · SQL · Jupyter Notebook · VSCode\n\nVisualization & BI: Tableau · Power BI · Plotly · Data Wrangling\n\n3D & Creative: Maya · Blender · Substance Painter\n\nOther: Google Suite · Microsoft Office"
  },
  {
    "objectID": "index.html#professional-strengths",
    "href": "index.html#professional-strengths",
    "title": "Hi, I’m Hien (Emi) Bui",
    "section": "",
    "text": "Project Management · Data Analysis · Data Visualization · Communication\n\nProblem Solving · Teamwork · Critical Thinking · Research\n\nCheck out my Projects, view my Resume, or connect via\nLinkedIn · GitHub"
  },
  {
    "objectID": "projects/ev-adoption.html",
    "href": "projects/ev-adoption.html",
    "title": "Tesla Takes the Wheel: Brand Comparisons and EV Adoption in Washington",
    "section": "",
    "text": "Electric vehicles are no longer just the future—they’re the present. In this project, I explore how Washington State is embracing EVs, with Tesla clearly driving the momentum. Using public registration data, I visualized four key dimensions of the EV landscape: growth over time, brand comparisons, electric range, and regional hotspots. The data tells a compelling story of how quickly things are changing, and how one brand in particular—Tesla—is helping lead that transformation."
  },
  {
    "objectID": "projects/ev-adoption.html#import-libraries",
    "href": "projects/ev-adoption.html#import-libraries",
    "title": "Tesla Takes the Wheel: Brand Comparisons and EV Adoption in Washington",
    "section": "4.1 Import Libraries",
    "text": "4.1 Import Libraries\n\n%pip install plotly\n%pip install polars great_tables\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport polars as pl\nfrom great_tables import (\n    GT, md, google_font, style, loc\n)\n\n# Load the dataset\ndf = pd.read_csv(\"data/projects/ev-adoption/Electric_Vehicle_Population_Data.csv\")\n\n# Filter only Washington's data\ndf_wa = df[df['State'] == 'WA']\n\n\n4.1.1 EV Adoption by Model Year\nThis bar chart shows just how sharply EV adoption has climbed, especially in the past five years. The 2023 spike is a real eye-opener.\n\n# Filter data of EV Count by model year\ndf_wa_model = (\n    df_wa[['model', 'model_year']]\n    .groupby('model_year')\n    .agg({\"model\": \"count\"})\n    .reset_index()\n)\n\ndf_wa_model['model_year'] = df_wa_model['model_year'].astype(str)\ndf_wa_model['flag'] = df_wa_model['model_year'] == '2023'\n\nfig_bar = px.bar(\n    df_wa_model,  \n    x='model_year',\n    y='model', \n    template='plotly_white',\n    title=\"&lt;b&gt;&lt;i&gt;Washington's&lt;/i&gt; Shift to Electric: Model Year Trends in EV Adoption&lt;/b&gt;\",\n    text='model',\n    color='flag'\n)\n\nfig_bar.show()\n\n\n\n\n4.1.2 Top 5 Cities for EV Ownership\nSeattle is far ahead of the rest.\n\n# Filter data of top 5 cities by total EV count\ntop_cities = (\n    df_wa.groupby('city')\n    .agg({\"model\": \"count\"})\n    .sort_values(by=\"model\", ascending=False)\n    .head(5)\n    .reset_index()\n    .rename(columns={'city': 'City','model': 'EV Count'})\n)\n\ntop_cities['Flag'] = top_cities['City'] == \"Seattle\"\n\n# Create a styled table\ntable_city = (\n    GT(pl.DataFrame(top_cities[['City','EV Count']]))\n    .tab_header(\n        title = md(\"__Where Washington Drives Electric: Top 5 EV-Adopting Cities__\")\n    )\n)\n\ntable_city.show()\n\n\n\n\n4.1.3 EV Brand Popularity in Major Cities\nTesla leads in every single one, often by a huge margin.\n\n# Find top 5 cities\ntop_5_cities = (\n    df_wa.groupby('city')\n    .agg({\"model\": \"count\"})\n    .sort_values(by=\"model\", ascending=False)\n    .head(5)\n    .index\n)\n\n# Filter data\ndf_top_cities = df_wa[df_wa['city'].isin(top_5_cities)]\n\n# Group by city and brand\ndf_brand = (\n    df_top_cities.groupby(['city','make'])\n    .agg({\"model\": \"count\"})\n    .reset_index()\n    .rename(columns={'city':'City','make':'Brand','model':'EV Count'})\n)\n\n# top 5 per city\ndf_brand_top5 = df_brand.groupby('City').head(5)\ndf_brand_top5['Flag'] = df_brand_top5['Brand'] == \"TESLA\"\n\nfig_facet = px.bar(\n    df_brand_top5,\n    x='Brand', y='EV Count',\n    facet_col='City',\n    color='Flag'\n)\n\nfig_facet.show()\n\n\n\n\n4.1.4 Electric Range by Brand\nTesla pulls far ahead in driving distance.\n\ntop_brands = ['TESLA','CHEVROLET','NISSAN','FORD','KIA','TOYOTA','BMW','HYUNDAI','JEEP','VOLKSWAGEN']\n\ndf_elec_range = df_wa[df_wa['make'].isin(top_brands)]\ndf_elec_range['flag'] = df_elec_range['make'] == \"TESLA\"\n\nfig_box = px.box(\n    df_elec_range, \n    x='electric_range', \n    y='make',\n    title='&lt;b&gt;Electric Range by Brand Among Top EV Makes&lt;/b&gt;',\n    color='flag'\n)\n\nfig_box.show()"
  },
  {
    "objectID": "projects/luxury-car-price.html",
    "href": "projects/luxury-car-price.html",
    "title": "Car Price Analysis and Visualization",
    "section": "",
    "text": "This project analyzes the average price of luxury car brands using Python, Pandas, and Plotly.\nIt provides insightful visualizations to compare car prices across different brands.\n\n\n\nVertical & horizontal bar charts for data comparison.\n\nFormatted tables with well-structured insights.\n\nCustom styling for better visual appeal.\n\nNumber formatting to improve readability."
  },
  {
    "objectID": "projects/luxury-car-price.html#key-features",
    "href": "projects/luxury-car-price.html#key-features",
    "title": "Car Price Analysis and Visualization",
    "section": "",
    "text": "Vertical & horizontal bar charts for data comparison.\n\nFormatted tables with well-structured insights.\n\nCustom styling for better visual appeal.\n\nNumber formatting to improve readability."
  },
  {
    "objectID": "projects/luxury-car-price.html#formatted-data-table",
    "href": "projects/luxury-car-price.html#formatted-data-table",
    "title": "Car Price Analysis and Visualization",
    "section": "2.1 Formatted Data Table",
    "text": "2.1 Formatted Data Table\nThis table presents key specifications of luxury car brands, including their average price, mileage, and seating capacity.\nThe color-coded price column visually highlights the most expensive brands, reinforcing Ferrari and Lamborghini’s dominance.\nInterestingly, the data also reveals that sports cars tend to have lower mileage, further suggesting that they are driven less compared to larger, more practical luxury vehicles."
  },
  {
    "objectID": "projects/luxury-car-price.html#vertical-bar-chart",
    "href": "projects/luxury-car-price.html#vertical-bar-chart",
    "title": "Car Price Analysis and Visualization",
    "section": "2.2 Vertical Bar Chart",
    "text": "2.2 Vertical Bar Chart\nThis vertical bar chart visualizes the ranking of car brands by average price, reinforcing Ferrari’s position as the most expensive brand, followed by Lamborghini and Rolls-Royce.\nThe labels provide precise price values, helping illustrate the steep differences among luxury brands.\nThis format effectively showcases the clear hierarchy in pricing within the high-end automobile market."
  },
  {
    "objectID": "projects/luxury-car-price.html#horizontal-bar-chart",
    "href": "projects/luxury-car-price.html#horizontal-bar-chart",
    "title": "Car Price Analysis and Visualization",
    "section": "2.3 Horizontal Bar Chart",
    "text": "2.3 Horizontal Bar Chart\nThis horizontal bar chart highlights Ferrari as the most expensive car brand, with a significant price gap of $11 million above its closest competitor, Lamborghini.\nRolls-Royce, Maserati, and Porsche also rank among the higher-priced brands, while luxury SUVs such as Land Rover, Lexus, and BMW fall into a lower price range.\nThe chart emphasizes how brand reputation and performance contribute more to pricing than vehicle size or seating capacity."
  },
  {
    "objectID": "projects/luxury-car-price.html#facet-bar-chart",
    "href": "projects/luxury-car-price.html#facet-bar-chart",
    "title": "Car Price Analysis and Visualization",
    "section": "2.4 Facet Bar Chart",
    "text": "2.4 Facet Bar Chart\nThis chart segments car prices based on seating capacity, revealing that higher seating capacities do not necessarily lead to higher prices.\nWhile 2-seater luxury brands like Ferrari and Lamborghini dominate in price, some 4- and 5-seaters—such as Rolls-Royce and Maserati—also command premium prices.\nHowever, vehicles with 6-7 seats tend to have lower prices, indicating that exclusivity and performance may play a greater role in pricing than seating capacity."
  },
  {
    "objectID": "projects/movie-recommender.html",
    "href": "projects/movie-recommender.html",
    "title": "Movie Recommender System",
    "section": "",
    "text": "This project is a Chinese movie recommendation system that suggests movies based on genres, famous actors, endings, voting, and ratings.\nThe dataset consists of 90 Chinese movies from IMDb, and multiple machine learning techniques are used to analyze and predict movie popularity.\n\n\n\n\n\nPython (for data cleaning)\nPandas (for data processing)\nPlotly (for interactive visualizations)\nR (for modeling and evaluation)\n\n\n\n\n\nCalculate similarity using Euclidean and Manhattan distances to recommend the top 5 movies based on a list of 5 watched titles.\nClassify movie groups using k-means with different feature sets and k values.\nUse KNN to predict popular movies based on selected features with train/test splits.\nApply a Decision Tree to predict high-rating movies using selected features.\nFit a Logistic Regression to estimate the probability of high rating.\n\n\n\n\n\nFor recommendations, both Euclidean and Manhattan distances work effectively.\nFor unsupervised methods like K-Means, groupings can be inconsistent on this small dataset.\nFamous leads may influence ratings, but the sample size limits strong conclusions.\nFor supervised methods (KNN, Decision Tree, Logistic Regression), accuracy rates are relatively high and similar; Decision Tree achieved the best accuracy in this study."
  },
  {
    "objectID": "projects/movie-recommender.html#technologies-and-methods-used",
    "href": "projects/movie-recommender.html#technologies-and-methods-used",
    "title": "Movie Recommender System",
    "section": "",
    "text": "Python (for data cleaning)\nPandas (for data processing)\nPlotly (for interactive visualizations)\nR (for modeling and evaluation)\n\n\n\n\n\nCalculate similarity using Euclidean and Manhattan distances to recommend the top 5 movies based on a list of 5 watched titles.\nClassify movie groups using k-means with different feature sets and k values.\nUse KNN to predict popular movies based on selected features with train/test splits.\nApply a Decision Tree to predict high-rating movies using selected features.\nFit a Logistic Regression to estimate the probability of high rating."
  },
  {
    "objectID": "projects/movie-recommender.html#key-findings",
    "href": "projects/movie-recommender.html#key-findings",
    "title": "Movie Recommender System",
    "section": "",
    "text": "For recommendations, both Euclidean and Manhattan distances work effectively.\nFor unsupervised methods like K-Means, groupings can be inconsistent on this small dataset.\nFamous leads may influence ratings, but the sample size limits strong conclusions.\nFor supervised methods (KNN, Decision Tree, Logistic Regression), accuracy rates are relatively high and similar; Decision Tree achieved the best accuracy in this study."
  },
  {
    "objectID": "projects/movie-recommender.html#based-on-euclidean-and-manhattan-distance-5-similar-movies",
    "href": "projects/movie-recommender.html#based-on-euclidean-and-manhattan-distance-5-similar-movies",
    "title": "Movie Recommender System",
    "section": "2.1 Based on Euclidean and Manhattan distance: 5 similar movies",
    "text": "2.1 Based on Euclidean and Manhattan distance: 5 similar movies\nExample recommendations: - Kill Me Love Me - Love Me, Love My Voice - Here We Meet Again - The Imperial Coroner - Bohe zhi xia"
  },
  {
    "objectID": "projects/movie-recommender.html#best-predictive-model",
    "href": "projects/movie-recommender.html#best-predictive-model",
    "title": "Movie Recommender System",
    "section": "2.2 Best Predictive Model",
    "text": "2.2 Best Predictive Model\n\nDecision Tree achieved the highest accuracy (about 80% in this run).\nHigh voting count was the most important factor in predicting high-rated movies."
  },
  {
    "objectID": "projects/movie-recommender.html#clustering-insights",
    "href": "projects/movie-recommender.html#clustering-insights",
    "title": "Movie Recommender System",
    "section": "2.3 Clustering Insights",
    "text": "2.3 Clustering Insights\n\nMovies with high voting tend to have higher ratings.\nHappy-ending movies generally receive lower ratings than sad or open-ended movies."
  },
  {
    "objectID": "projects/movie-recommender.html#dataset",
    "href": "projects/movie-recommender.html#dataset",
    "title": "Movie Recommender System",
    "section": "2.4 Dataset",
    "text": "2.4 Dataset\n\n2.4.1 Key Features\n\nMovies: 90 Chinese series (1998–2024)\nGenres: Comedy, Drama, Crime, Romance, Action, Adventure, Mystery, Fantasy\nRuntime: 40–90 minutes\nIMDb Ratings: 6.4–8.6\nFamous actors present in many titles\nEnding types: Happy, Sad, Open\nVoting data: 14–5,669 votes\n\n\n\n2.4.2 Dataset Variables\nThis dataset contains information on 90 Chinese movie series (1998–2024). Below is a detailed breakdown of variables:\n\n\n\n#\nVariable Name\nDescription\n\n\n\n\n1\nID\nIndex number.\n\n\n2\nTitle\nEnglish title.\n\n\n3\nOriginal_Title\nChinese title.\n\n\n4\nRuntime\nMinutes per episode.\n\n\n5\nEnding\nhappy, sad, or open.\n\n\n6\nEnding_Happy\n1 if Ending is happy, else 0.\n\n\n7\nEnding_Sad\n1 if Ending is sad, else 0.\n\n\n8\nEnding_Open\n1 if Ending is open, else 0.\n\n\n9\nGenres\nMain genre.\n\n\n10\nGenre_Comedy\nOne-hot for Comedy.\n\n\n11\nGenre_Drama\nOne-hot for Drama.\n\n\n12\nGenre_Crime\nOne-hot for Crime.\n\n\n13\nGenre_Romance\nOne-hot for Romance.\n\n\n14\nGenre_Action\nOne-hot for Action.\n\n\n15\nGenre_Adventure\nOne-hot for Adventure.\n\n\n16\nGenre_Mystery\nOne-hot for Mystery.\n\n\n17\nGenre_Fantasy\nOne-hot for Fantasy.\n\n\n18\nMale_Lead\nName of male lead.\n\n\n19\nMale_Famous\n1 if male lead is famous, else 0.\n\n\n20\nFemale_Lead\nName of female lead.\n\n\n21\nFemale_Famous\n1 if female lead is famous, else 0.\n\n\n22\nMain_Famous\n1 if any main lead is famous.\n\n\n23\nRelease_Date\nDate of release.\n\n\n24\nIs_Summer\n1 if released in Jul–Sep.\n\n\n25\nYear\nRelease year.\n\n\n26\nNum_Votes\nNumber of votes.\n\n\n27\nHigh_Voting\n1 if Num_Votes ≥ 1000.\n\n\n28\nIMDB_Rating\nIMDb rating.\n\n\n29\nHigh_Rating\n1 if IMDb_Rating ≥ 8.\n\n\n30\nViet_Title\nVietnamese title (personal reference).\n\n\n\nNotes:\n\nEnding_* are derived from Ending.\nGenre_* are one-hot encodings of Genres.\n*Famous indicators are based on a predefined list.\nHigh_Voting and High_Rating are binary thresholds."
  },
  {
    "objectID": "projects/movie-recommender.html#general-data-distribution",
    "href": "projects/movie-recommender.html#general-data-distribution",
    "title": "Movie Recommender System",
    "section": "3.1 General Data Distribution",
    "text": "3.1 General Data Distribution\nTreemap summary of top-rated movies:\n\nPie chart of genre distribution (Drama is most dominant):"
  },
  {
    "objectID": "projects/movie-recommender.html#movie-recommendation-via-distance-metrics---euclidean-manhattan-distance",
    "href": "projects/movie-recommender.html#movie-recommendation-via-distance-metrics---euclidean-manhattan-distance",
    "title": "Movie Recommender System",
    "section": "3.2 Movie Recommendation via Distance Metrics - Euclidean & Manhattan distance",
    "text": "3.2 Movie Recommendation via Distance Metrics - Euclidean & Manhattan distance\nFirstly, 5 titles which are ‘Yuan lai wo hen ai ni’, ‘Lost You Forever’, ‘Mischievous Kiss’, ‘Amidst a Snowstorm of Love’, and ‘My Fair Princess’ are selected randomly in R from the list of 90 movie dataset as a list of watched movies.\nSecondly, distances of all movies are calculated including 5 watched movies using Euclidean and Manhattan. There are 15 features to find similarities between movies, which are ‘Title’, ‘Ending_Happy’, ‘Ending_Sad’, ‘Ending_Open’, ‘Genre_Comedy’, ‘Genre_Drama’, ‘Genre_Crime’, ‘Genre_Romance’, ‘Genre_Action’, ‘Genre_Adventure’, ‘Genre_Mystery’, ‘Genre_Fantasy’, ‘Female_Famous’, ‘Male_Famous’, ‘Main_Famous’, ‘Is_Summer’, ‘High_Voting’, and ‘High_Rating’. Except for Title, others are binary variables.\nThirdly, there are 5 sub steps to get the list of 5 movie recommendations: - Step 1: Find distances for 5 watched movies - ‘’Yuan lai wo hen ai ni’, ‘Lost You Forever’, ‘Mischievous Kiss’, ‘Amidst a Snowstorm of Love’, and ‘My Fair Princess’ to every other movies from the calculated distance matric results. - Step 2: Average the distances of 5 watched movies to every other movies - Step 3: Order the distances to find the closest movies - Step 4: Get the top 5 recommendations excluding 5 watched movies\nFinally, the list of 5 movie suggestions is: - “Kill Me Love Me”\n- “Love Me, Love My Voice” - “Here We Meet Again”\n- “The Imperial Coroner”\n- “Bohe zhi xia”"
  },
  {
    "objectID": "projects/movie-recommender.html#k-means-clustering-for-classification",
    "href": "projects/movie-recommender.html#k-means-clustering-for-classification",
    "title": "Movie Recommender System",
    "section": "3.3 K-Means Clustering for Classification",
    "text": "3.3 K-Means Clustering for Classification\nThe genre grouping uses features as Genre_Comedy, Genre_Drama, Genre_Crime, Genre_Romance, Genre_Action, Genre_Adventure, Genre_Mystery, Genre_Fantasy, and High_Rating, with k = 12. The cluster sometimes does not make sense, for example, Cluster 3 - Genre_Romance has both high and not high ratings.\n\n\n3.3.1 Group movies according to Main_Famous, High_Rating\nThe genre grouping uses features such as Main_Famous and High_Rating, with k = 4. Movies with famous leads tend to influence ratings more than those without. However, in this small dataset, the percentage of high-rated and not-high-rated movies is almost equal. Therefore, it is unclear whether movies with famous actors or actresses are highly rated.\n\n\n\n3.3.2 Group movies according to Ending, High_Rating\nThe genre grouping uses features such as Ending_Happy, Ending_Sad, Ending_Open, and High_Rating, with k = 6. It is evident that movies with happy endings tend to have lower ratings. However, sad and open endings show no significant difference in their high-rating percentages.\n\n\n\n3.3.3 Group movies according to High_Voting, High_Rating*\nThe genre grouping uses features such as High_Voting, High_Rating, with k = 4. There is consistent evidence that movies with high voting tend to have high ratings and vice versa. However, low voting seems to impact ratings more than high voting."
  },
  {
    "objectID": "projects/movie-recommender.html#machine-learning-models-for-popularity-prediction",
    "href": "projects/movie-recommender.html#machine-learning-models-for-popularity-prediction",
    "title": "Movie Recommender System",
    "section": "3.4 Machine Learning Models for Popularity Prediction",
    "text": "3.4 Machine Learning Models for Popularity Prediction\n\n3.4.1 Decision Tree\nThis algorithm has features as Ending_Happy, Ending_Sad, Ending_Open, Main_Famous, and High_Voting to predict High_Rating. At first, the dataset is labeled as train and test dataset, which is done in KNN. Using R to run the tree model, we have the image as below:\n\nThe prediction result\n\n\nAccuracy: 80% | Misclassification: 20%\n\n\n3.4.2 Logistic Regression\nThis algorithm has features as Ending_Happy, Ending_Open, Ending_Sad, Male_Famous, Female_Famous, and High_Voting to predict High_Rating. The model is built in R and the result is as below:\n\nlog( p̂ / (1 - p̂) ) = -1.1550 - 0.5719 × Ending_Happy + 0.5185 × Ending_Open + 0.5650 × Male_Famous - 0.1104 × Female_Famous + 2.2302 × High_Voting"
  },
  {
    "objectID": "projects/movie-recommender.html#notes",
    "href": "projects/movie-recommender.html#notes",
    "title": "Movie Recommender System",
    "section": "3.5 Notes:",
    "text": "3.5 Notes:\np̂ / (1 - p̂): the predicted probability of High_Rating = 1\nInterpretation table\n\nThe confusion matrix\n\nBased on the confusion matrix, the accuracy and misclassification rates are described as below:\n\nOut of 61 not High_Rating movies, there are 52 correct predictions (true negatives) and 9 misclassifications (false positives). Out of 29 High_Rating movies, there are 17 correct predictions (true positives) and 12 misclassifications (false negatives). The accuracy rate is 76.7%, and the misclassification rate is 23.3%.\nAccuracy: 76.7% | Misclassification: 23.3%"
  }
]